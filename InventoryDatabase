using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
public class InventoryManager : MonoBehaviour
{
    public static InventoryManager instance;

    public List<ItemObject> inventory = new List<ItemObject>();

    public delegate void OnItemAddCallback(ItemObject item);
    public OnItemAddCallback onItemAddCallback;

    public delegate void OnItemRemoveCallback(ItemObject item);
    public OnItemAddCallback onItemRemoveCallback;

    //references
    public GameObject inventoryUI;
    public InventoryUI inventorySlots;
    public Button firstButton;
    public TextMeshProUGUI itemNameToolTip;
    public TextMeshProUGUI itemDescriptionToolTip;


    [HideInInspector]
    public bool inInventory;
    [HideInInspector]
    public bool inInitialLoad;
    [SerializeField]
    private InventoryObject currentPlayerInventory; //needs to be set to Bobbert's Inventory before Start() because GameManager hasn't loaded yet

    public void Awake()
    {
        if (instance == null)
        {
            instance = this;
        }
        else
        {
            Debug.LogError("Fix this");
        }
    }

    private void Start()
    {
        inventoryUI.SetActive(false);
        inventorySlots.CreateSlots();

        //needs to be set to Bobbert's Inventory before Start() because GameManager hasn't loaded yet
        currentPlayerInventory = GameManager.instance.player.GetComponent<Character>().inventory;
    }

    public void AddItem(ItemObject newItem, int _amount = 1)
    {
        inventory.Add(newItem);

        //~~
        if (!inInitialLoad)
        {
            //Saves to the Inventory DataBase of the currently active player character
            currentPlayerInventory = GameManager.instance.player.GetComponent<Character>().inventory;
            for (int i = 0; i < _amount; i++)
            {
                currentPlayerInventory.AddItem(newItem.CreateItem(), 1);
            }
        }
        //~~

        for (int i = 0; i < _amount; i++)
        {
            if (onItemAddCallback != null) onItemAddCallback.Invoke(newItem);
        }

        currentPlayerInventory.Save();
    }

    public void RemoveItem(ItemObject newItem, int _amount = 1)
    {
        inventory.Remove(newItem);

        //~~
        //Saves to the Inventory DataBase of the currently active player character
        for (int i = 0; i < _amount; i++)
        {
            currentPlayerInventory.DeleteItem(newItem.CreateItem(), 1);
            if (onItemRemoveCallback != null) onItemRemoveCallback.Invoke(newItem);
        }
        //~~

        currentPlayerInventory.Save();
    }

    private void Update()
    {
        if (InputManager.instance.GetKeyDown("menu"))
        {
            inventoryUI.SetActive(!inventoryUI.activeSelf);

            if (inventoryUI.activeSelf)
            {
                GameManager.instance.LockControls = true;
                GameManager.instance.InInventory = true;
                inInventory = true;
                firstButton.Select();
            }
            else
            {
                GameManager.instance.LockControls = false;
                GameManager.instance.InInventory = false;
                inInventory = false;
            }
        }
    }
}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[CreateAssetMenu(fileName = "New Item Database", menuName = "Inventory System/Items/Database")]
public class ItemDatabaseObject : ScriptableObject, ISerializationCallbackReceiver
{
    public ItemObject[] Items;
    public Dictionary<int, ItemObject> GetItem = new Dictionary<int, ItemObject>();

    public void OnAfterDeserialize()
    {
        for (int i = 0; i < Items.Length; i++)
        {
            Items[i].Id = i;
            GetItem.Add(i, Items[i]);
        }
    }

    public void OnBeforeSerialize()
    {
        GetItem = new Dictionary<int, ItemObject>();
    }

    public ItemObject GetItemByID(int _itemId)
    {
        GetItem.TryGetValue(_itemId, out ItemObject foundItem);
        return foundItem;
    }
}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

    public enum ItemType
    {
        Consumable,
        Equipment,
        QuestItem,
        Chest,
        Key,
        Money,
        Resource
    }

    public enum Attributes
    {
        Speed,
        Jump,
        Stamina,
        HitPoints,
        MagicPoints,
        Dexterity,
        Luck,
        Strength,
        Intellect,
        Attack,
        MagicAttack
    }

    public enum BuffType
    {
        Additive,
        Percentage
    }

    public abstract class ItemObject : ScriptableObject
    {
        public int Id;
        public string myName;
    [TextArea(15, 20)]
    public string myDescription;
        public int maxStackSize = 1;
        [Space(10)]
        public Sprite uiSprite;
        public GameObject prefab;
        public ItemType type;
        public ItemBuff[] buffs;

        public Item CreateItem()
        {
            Item newItem = new Item(this);
            return newItem;
        }
    }

    [System.Serializable]
    public class Item
    {
        public string Name;
        public int Id;
        public ItemBuff[] buffs;
        public Item(ItemObject item)
        {
            Name = item.name;
            Id = item.Id;
            buffs = new ItemBuff[item.buffs.Length];
            for (int i = 0; i < buffs.Length; i++)
            {
                buffs[i] = new ItemBuff(item.buffs[i].buffType, item.buffs[i].min, item.buffs[i].max, item.buffs[i].difficulty, item.buffs[i].buffDuration)
                {
                    attribute = item.buffs[i].attribute
                };
            }
        }
    }



    [System.Serializable]
    public class ItemBuff
    {
        public Attributes attribute;
        public BuffType buffType;
        public int min;
        public int max;
        [Tooltip("If left at '0' the buff will apply instantly")]
        public int buffDuration;
        [Range(0.1f, 10)]
        public double difficulty = 1;
        [HideInInspector]
        public int value;

    public ItemBuff(BuffType _buffType, int _min, int _max, double _difficulty, int _buffDuration = 0)
        {
            min = _min;
            max = _max;
            buffDuration = _buffDuration;
            difficulty = Utilities.Clamp(_difficulty, 0.1, 10);

            /*
            switch (_buffType)
            {
                case BuffType.Additive:
                    break;
                case BuffType.Percentage:
                    break;
            }
            */

            GenerateValue();
        }
        public void GenerateValue()
        {
            value = Utilities.GetRandomNumber(min, max, difficulty);
        }
    }

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;
using UnityEditor;
using System.Runtime.Serialization;

[CreateAssetMenu(fileName = "New Inventory", menuName = "Inventory System/Inventory")]
public class InventoryObject : ScriptableObject
{
    public string savePath = "SaveData.save";
    public string characterName;
    public ItemDatabaseObject database;
    public Inventory Container;

    public void AddItem(Item _item, int _amount)
    {
        if (_item.buffs.Length > 0)
        {
            SetEmptySlot(_item, _amount);
            return;
        }

        for (int i = 0; i < Container.Items.Length; i++)
        {
            if (Container.Items[i].ID == _item.Id)
            {
                Container.Items[i].AddAmount(_amount);
                return;
            }
        }
        SetEmptySlot(_item, _amount);

    }

    public void DeleteItem(Item _item, int _amount)
    {
        for (int i = 0; i < Container.Items.Length; i++)
        {
            if (Container.Items[i].ID == _item.Id)
            {
                Container.Items[i].AddAmount(-_amount);
                if (Container.Items[i].amount == 0)
                    Container.Items[i].ID = -1;
                return;
            }
        }
    }
    public InventorySlots SetEmptySlot(Item _item, int _amount)
    {
        for (int i = 0; i < Container.Items.Length; i++)
        {
            if (Container.Items[i].ID <= -1)
            {
                Container.Items[i].UpdateSlot(_item.Id, _item, _amount);
                return Container.Items[i];
            }
        }
        //set up functionality for full inventory
        return null;
    }

    public void MoveItem(InventorySlots item1, InventorySlots item2)
    {
        InventorySlots temp = new InventorySlots(item2.ID, item2.item, item2.amount);
        item2.UpdateSlot(item1.ID, item1.item, item1.amount);
        item1.UpdateSlot(temp.ID, temp.item, temp.amount);
    }


    public void RemoveItem(Item _item)
    {
        for (int i = 0; i < Container.Items.Length; i++)
        {
            if (Container.Items[i].item == _item)
            {
                Container.Items[i].UpdateSlot(-1, null, 0);
            }
        }
    }

    [ContextMenu("Save")]
    public void Save()
    {
        //string saveData = JsonUtility.ToJson(this, true);
        //BinaryFormatter bf = new BinaryFormatter();
        //FileStream file = File.Create(string.Concat(Application.persistentDataPath, savePath));
        //bf.Serialize(file, saveData);
        //file.Close();

        if (savePath == null)
            savePath = "InventoryData.save";

        IFormatter formatter = new BinaryFormatter();
        Directory.CreateDirectory(Path.Combine(Application.persistentDataPath, characterName));
        Stream stream = new FileStream(Path.Combine(Application.persistentDataPath, characterName, savePath), FileMode.Create, FileAccess.Write);
        formatter.Serialize(stream, Container);
        stream.Close();

        Debug.LogWarning("Creating SaveData at: " + Path.Combine(Application.persistentDataPath, characterName, savePath));
    }
    [ContextMenu("Load")]
    public void Load()
    {

        if (savePath == null)
            savePath = "InventoryData.save";

        if (File.Exists(Path.Combine(Application.persistentDataPath, characterName, savePath)))
        {
            //BinaryFormatter bf = new BinaryFormatter();
            //FileStream file = File.Open(string.Concat(Application.persistentDataPath, savePath), FileMode.Open);
            //JsonUtility.FromJsonOverwrite(bf.Deserialize(file).ToString(), this);
            //file.Close();

            IFormatter formatter = new BinaryFormatter();
            Stream stream = new FileStream(Path.Combine(Application.persistentDataPath, characterName, savePath), FileMode.Open, FileAccess.Read);
            Inventory newContainer = (Inventory)formatter.Deserialize(stream);
            for (int i = 0; i < Container.Items.Length; i++)
            {
                Container.Items[i].UpdateSlot(newContainer.Items[i].ID, newContainer.Items[i].item, newContainer.Items[i].amount);
            }
            stream.Close();

            Debug.LogWarning("Loading SaveData at: " + Path.Combine(Application.persistentDataPath, characterName, savePath));
        }
    }
    [ContextMenu("Clear")]
    public void Clear()
    {
        Container = new Inventory();
    }
}
[System.Serializable]
public class Inventory
{
    public InventorySlots[] Items = new InventorySlots[12];
}
[System.Serializable]
public class InventorySlots
{
    public int ID = -1;
    public Item item;
    public int amount;
    public InventorySlots()
    {
        ID = -1;
        item = null;
        amount = 0;
    }
    public InventorySlots(int _id, Item _item, int _amount)
    {
        ID = _id;
        item = _item;
        amount = _amount;
    }
    public void UpdateSlot(int _id, Item _item, int _amount)
    {
        ID = _id;
        item = _item;
        amount = _amount;
    }
    public void AddAmount(int value)
    {
        amount += value;
    }
}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public class InventoryUI : MonoBehaviour
{
    [HideInInspector]
    public InventorySlot[] slots;
    private Dictionary<Item, InventorySlot> itemsDisplayed;

    private InventoryObject currentPlayerInventory;

    private void Start()
    {
        InventoryManager.instance.onItemAddCallback += UpdateInventoryAdd;
        InventoryManager.instance.onItemRemoveCallback += UpdateInventoryRemove;
        slots = GetComponentsInChildren<InventorySlot>();
    }

    private void OnEnable()
    {
        foreach (InventorySlot slot in slots)
        {
            DisableConfirmationWindow(slot);
        }
    }

    public void CreateSlots()
    {
        InventoryManager.instance.inInitialLoad = true;
        currentPlayerInventory = GameManager.instance.player.GetComponent<Character>().inventory;
        currentPlayerInventory.Load();

        itemsDisplayed = new Dictionary<Item, InventorySlot>();
        for (int i = 0; i < currentPlayerInventory.Container.Items.Length; i++)
        {
            InventoryManager.instance.AddItem(currentPlayerInventory.database.GetItemByID(currentPlayerInventory.Container.Items[i].ID), currentPlayerInventory.Container.Items[i].amount);
        }

        InventoryManager.instance.inInitialLoad = false;
    }

    private void DisableConfirmationWindow(InventorySlot slot)
    {
        if (slot.GetComponentInChildren<ConfirmationWindow>())
            slot.GetComponentInChildren<ConfirmationWindow>().gameObject.SetActive(false);
    }

    private int? GetNextEmptySlot()
    {
        for (int i = 0; i < slots.Length; i++)
        {
            if (slots[i].item == null) return i;
        }
        Debug.LogError("Help I'm Null and I can't get out");
        return null;
    }

    private int? GetSameSlot(ItemObject newItem)
    {
        for (int i = slots.Length - 1; i >= 0; i--)
        {
            if (slots[i].item != null)
            {
                if (slots[i].item == newItem) return i;
            }
        }
        Debug.LogError("Help I'm Null and I can't get out");
        return null;
    }


    public void UpdateInventoryAdd(ItemObject newItem)
    {
        int remainder = GetRemainder(newItem);

        if (remainder == 0)
        {
            remainder = newItem.maxStackSize; //recalibrate
        }
        if (remainder == 1)
        {
            slots[(int)GetNextEmptySlot()].AddItem(newItem); //add new item stack

            if(newItem is Consumable)
            {
                Consumable consumable = newItem as Consumable;

                slots[(int)GetSameSlot(newItem)].GetComponent<ItemEventHandler>().unityEvent = consumable.itemEvent;
            }

            if(newItem is QuestItem)
            {
                QuestItem questItem = newItem as QuestItem;

                slots[(int)GetSameSlot(newItem)].GetComponent<ItemEventHandler>().unityEvent = questItem.triggerEventOnUse;
            }
        }
        else
        {
            slots[(int)GetSameSlot(newItem)].amount.text = remainder.ToString(); //update stack amount
        }
    }

    public void UpdateInventoryRemove(ItemObject newItem)
    {
        int remainder = GetRemainder(newItem);

        if (remainder == 0)
        {
            remainder = newItem.maxStackSize;
        }
        if (remainder == newItem.maxStackSize)
        {
            slots[(int)GetSameSlot(newItem)].amount.text = "";
            slots[(int)GetSameSlot(newItem)].RemoveItem();

            return;
        }
        if (remainder == 1)
        {
            slots[(int)GetSameSlot(newItem)].amount.text = "";
        }
        else
        {
            slots[(int)GetSameSlot(newItem)].amount.text = remainder.ToString();
        }
    }

    private int GetRemainder(ItemObject newItem)
    {
        int itemCount = InventoryManager.instance.inventory.Count(x => x == newItem);
        return itemCount % newItem.maxStackSize;

    }
}


using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class InventorySlot : MonoBehaviour
{

    public Image icon;
    [HideInInspector]
    public ItemObject item;
    public TextMeshProUGUI amount;
    public Button confirmButton;
    public GameObject confirmationWindow;

   public void AddItem(ItemObject newItem)
    {
        icon.overrideSprite = newItem.uiSprite;
        item = newItem;
    }
    public void RemoveItem()
    {
        icon.overrideSprite = null;
        item = null;
    }

    public void SelectConfirmButton()
    {
        if (item == null) return;

        confirmationWindow.SetActive(true);
        confirmButton.Select();
    }

    public void SelectSameButton()
    {
        GetComponentInParent<Button>().Select();
    }

    public void UseItem()
    {
        InventoryManager.instance.RemoveItem(item);
    }
}
